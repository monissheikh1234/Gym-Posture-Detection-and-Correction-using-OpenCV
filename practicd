from flask import Flask, render_template, Response
import cv2
import mediapipe as mp
import numpy as np
import math


app = Flask(__name__)

# Initialize MediaPipe Pose Detection
mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose

# Global variables for rep counting
counter = 0
stage = None

# Function to calculate angle between three points
def calculate_angle(a, b, c):
    a = np.array([a.x, a.y])  # First point
    b = np.array([b.x, b.y])  # Second point
    c = np.array([c.x, c.y])  # Third point

    radians = np.arctan2(c[1] - b[1], c[0] - b[0]) - np.arctan2(a[1] - b[1], a[0] - b[0])
    angle = np.abs(radians * 180.0 / np.pi)

    if angle > 180.0:
        angle = 360.0 - angle

    return angle

# Arm Curl Posture Detection
def check_arm_curl_posture(landmarks, frame):
    global counter, stage

    try:
        shoulder = [landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].x,
                    landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].y]
        elbow = [landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].x,
                 landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].y]
        wrist = [landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].x,
                 landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].y]

        # Calculate elbow angle
        elbow_angle = calculate_angle(shoulder, elbow, wrist)

        # Visualize angle
        cv2.putText(frame, str(int(elbow_angle)), tuple(np.multiply(elbow, [640, 480]).astype(int)),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)

        # Curl counter logic
        if elbow_angle > 160:
            stage = "down"
        if elbow_angle < 30 and stage == 'down':
            stage = "up"
            counter += 1

        # Render curl counter
        cv2.rectangle(frame, (0, 0), (225, 73), (245, 117, 16), -1)
        cv2.putText(frame, 'REPS', (15, 12), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
        cv2.putText(frame, str(counter), (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 2, cv2.LINE_AA)
        cv2.putText(frame, 'STAGE', (65, 12), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
        cv2.putText(frame, stage if stage else "N/A", (60, 60), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 2, cv2.LINE_AA)

    except Exception as e:
        print(e)

# Pushup Posture Detection
def check_pushup_posture(landmarks, frame):
    global counter, stage

    try:
        shoulder = [landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].x,
                    landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].y]
        elbow = [landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].x,
                 landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].y]
        wrist = [landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].x,
                 landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].y]
        hip = [landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].x,
               landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].y]
        ankle = [landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value].x,
                 landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value].y]

        # Calculate the elbow and body angles
        elbow_angle = calculate_angle(shoulder, elbow, wrist)
        body_angle = calculate_angle(shoulder, hip, ankle)

        # Visualize the elbow angle
        cv2.putText(frame, str(int(elbow_angle)), tuple(np.multiply(elbow, [640, 480]).astype(int)),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)

        # Pushup counter logic
        if elbow_angle > 160:
            stage = "up"
        if elbow_angle < 90 and stage == "up":
            stage = "down"
            counter += 1

        # Posture correction feedback
        feedback = ""
        if body_angle < 160:  # If the body is not straight enough
            feedback = "Keep your body straight!"
        elif elbow_angle > 160:
            feedback = "Extend your arms fully!"

        # Show feedback
        if feedback:
            cv2.putText(frame, feedback, (10, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2, cv2.LINE_AA)

        # Render counter and stage
        cv2.rectangle(frame, (0, 0), (225, 73), (245, 117, 16), -1)
        cv2.putText(frame, 'REPS', (15, 12), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
        cv2.putText(frame, str(counter), (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 2, cv2.LINE_AA)
        cv2.putText(frame, 'STAGE', (65, 12), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
        cv2.putText(frame, stage if stage else "N/A", (60, 60), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 2, cv2.LINE_AA)

    except Exception as e:
        print(e)

# Weightlifting Posture Detection
def check_weightlifting_posture(landmarks, frame):
    global counter, stage

    try:
        # Extracting shoulder, elbow, and wrist coordinates
        shoulder = [landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].x,
                    landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].y]
        elbow = [landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].x,
                 landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].y]
        wrist = [landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].x,
                 landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].y]

        # Calculate the elbow angle using a helper function
        elbow_angle = calculate_angle(shoulder, elbow, wrist)

        # Convert landmark coordinates to pixel values based on frame size (640x480 in this case)
        elbow_coords = tuple(np.multiply(elbow, [640, 480]).astype(int))

        # Visualize the elbow angle on the frame
        cv2.putText(frame, str(int(elbow_angle)), elbow_coords,
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)

        # Weightlifting counter logic
        if elbow_angle > 160:
            stage = "up"
        if elbow_angle < 90 and stage == "up":
            stage = "down"
            counter += 1

        # Render counter and stage on the frame
        cv2.rectangle(frame, (0, 0), (225, 73), (245, 117, 16), -1)

        # Display 'REPS' and the current count on the frame
        cv2.putText(frame, 'REPS', (15, 12), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
        cv2.putText(frame, str(counter), (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 2, cv2.LINE_AA)

    except Exception as e:
        print(f"Error: {e}")
        pass
# Video streaming generator
def gen_frames():
    cap = cv2.VideoCapture(0)  # Change this if you're using a video file
    while True:
        success, frame = cap.read()
        if not success:
            break
        frame = check_weightlifting_posture(frame)
        # Encode frame to JPEG
        ret, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')


# Route to display video feed
@app.route('/video_feed')
def video_feed():
    return Response(gen_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')


@app.route('/')
def index():
    return render_template('index.html')  # You should have an index.html in a templates folder


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)  # You can change the port if need